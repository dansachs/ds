import Analytics from "analytics-node";
declare enum SiteEvents {
    PUBLISH_CLICKED = "sitePublishClick",
    SOURCE_INFO_ENTER = "sitePublishInfoEnter",
    CREATED = "siteCreate",
    UPDATE_START = "siteUpdateStart",
    UPDATE_STOP = "siteUpdateStop",
    VISIT_SITE = "siteVisit"
}
declare enum SubscriptionEvents {
    CREATED = "subscriptionCreated"
}
export declare type UserEventProps = {
    tier: UserTier;
};
export declare type RevenueEventProps = {
    $quantity: number;
    $revenue: number;
    $price: number;
};
export declare type SiteEventProps = {
    isCustomDomain?: boolean;
    isFirstTime?: boolean;
    domain: string;
};
export declare type SiteUpdatedEventProps = {
    source: "hook";
    progress: "start" | "stop";
    status?: CompletionStatus;
};
export declare type SubscriptionEventProps = {
    tier: UserTier;
};
declare enum CompletionStatus {
    OK = "ok"
}
declare enum UserTier {
    SEED = "seed"
}
export declare type SegmentClientOpts = {
    key?: string;
    forceNew?: boolean;
};
export declare const SEGMENT_EVENTS: {
    SiteEvents: typeof SiteEvents;
    SubscriptionEvents: typeof SubscriptionEvents;
};
declare type SegmentExtraArg = {
    context?: any;
};
export declare enum TelemetryStatus {
    /** The user set that telemetry should be disabled in the workspace config. */
    DISABLED_BY_WS_CONFIG = "disabled by ws config",
    /** The user set that telemetry should be disabled in VSCode settings. */
    DISABLED_BY_VSCODE_CONFIG = "disabled by vscode config",
    /** The user used the Disable Telemetry command to disable telemetry. */
    DISABLED_BY_COMMAND = "disabled by command",
    /** The user disabled telemetry in configuration, but used the Enable Telemetry command to give permission. */
    ENABLED_BY_COMMAND = "enabled by command",
    /** The user allowed telemetry by configuration. */
    ENABLED_BY_CONFIG = "enabled by config",
    /** The user did not opt out of telemetry prior to 0.46.0 update */
    ENABLED_BY_MIGRATION = "enabled by migration"
}
export declare type TelemetryConfig = {
    status: TelemetryStatus;
};
export declare class SegmentClient {
    _segmentInstance: Analytics;
    private _anonymousId;
    private _hasOptedOut;
    private logger;
    static _singleton: undefined | SegmentClient;
    static instance(opts?: SegmentClientOpts): SegmentClient;
    /** Legacy: If exists, Dendron telemetry has been disabled. */
    static getDisableConfigPath(): string;
    /** May contain configuration for Dendron telemetry. */
    static getConfigPath(): string;
    static readConfig(): TelemetryConfig | undefined;
    static getStatus(): TelemetryStatus;
    static isDisabled(status?: TelemetryStatus): boolean;
    static isEnabled(status?: TelemetryStatus): boolean;
    static setByConfig(status?: TelemetryStatus): boolean;
    static enable(why: TelemetryStatus.ENABLED_BY_COMMAND | TelemetryStatus.ENABLED_BY_CONFIG | TelemetryStatus.ENABLED_BY_MIGRATION): void;
    static disable(why: TelemetryStatus.DISABLED_BY_COMMAND | TelemetryStatus.DISABLED_BY_VSCODE_CONFIG | TelemetryStatus.DISABLED_BY_WS_CONFIG): void;
    constructor(_opts?: SegmentClientOpts);
    identifyAnonymous(props?: {
        [key: string]: any;
    }, opts?: SegmentExtraArg): void;
    identify(id?: string, props?: {
        [key: string]: any;
    }, opts?: SegmentExtraArg): void;
    track(event: string, data?: {
        [key: string]: string | number | boolean;
    }, opts?: {
        context: any;
    }): void;
    get hasOptedOut(): boolean;
}
export {};
