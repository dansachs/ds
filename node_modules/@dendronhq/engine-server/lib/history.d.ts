import { URI } from "vscode-uri";
export declare type HistoryEvent = {
    action: HistoryEventAction;
    source: HistoryEventSource;
    id?: string;
    uri?: URI;
    data?: any;
};
export declare type HistoryEventSource = "engine" | "src" | "extension" | "lspServer" | "apiServer" | "lookupProvider" | "watcher";
export declare type HistoryEventAction = "delete" | "create" | "activate" | "initialized" | "not_initialized" | "rename" | "upgraded" | APIServerEvent | "done" | "error";
export declare type APIServerEvent = "changedPort";
declare type HistoryEventListenerFunc = (event: HistoryEvent) => void;
declare type HistoryEventListenerFuncEntry = {
    id: string;
    listener: (event: HistoryEvent) => void;
};
interface IHistoryService {
    readonly events: HistoryEvent[];
    add(event: HistoryEvent): void;
    lookBack(num?: number): HistoryEvent[];
}
export declare class HistoryService implements IHistoryService {
    readonly events: HistoryEvent[];
    /**
     @deprecated
     */
    subscribers: {
        [k in HistoryEventSource]: HistoryEventListenerFunc[];
    };
    subscribersv2: {
        [k in HistoryEventSource]: HistoryEventListenerFuncEntry[];
    };
    pause: boolean;
    static instance(): HistoryService;
    constructor();
    add(event: HistoryEvent): void;
    remove(id: string, source: HistoryEventSource): void;
    clearSubscriptions(): void;
    lookBack(num?: number): HistoryEvent[];
    subscribe(source: HistoryEventSource, func: HistoryEventListenerFunc): void;
    subscribev2(source: HistoryEventSource, ent: HistoryEventListenerFuncEntry): void;
}
export {};
