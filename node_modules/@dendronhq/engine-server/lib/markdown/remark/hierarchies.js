"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.hierarchies = void 0;
const common_all_1 = require("@dendronhq/common-all");
const lodash_1 = __importDefault(require("lodash"));
const mdast_builder_1 = require("mdast-builder");
const unist_builder_1 = __importDefault(require("unist-builder"));
const site_1 = require("../../topics/site");
const utils_1 = require("../../utils");
const types_1 = require("../types");
const utils_2 = require("../utils");
const plugin = function (opts) {
    const proc = this;
    const hierarchyDisplayTitle = (opts === null || opts === void 0 ? void 0 : opts.hierarchyDisplayTitle) || "Children";
    const hierarchyDisplay = lodash_1.default.isUndefined(opts === null || opts === void 0 ? void 0 : opts.hierarchyDisplay)
        ? true
        : opts === null || opts === void 0 ? void 0 : opts.hierarchyDisplay;
    function transformer(tree) {
        var _a, _b, _c;
        let root = tree;
        const { fname, vault, dest, config, insideNoteRef } = utils_2.MDUtilsV4.getDendronData(proc);
        if (!fname || insideNoteRef) {
            return;
        }
        if (dest !== types_1.DendronASTDest.HTML) {
            return;
        }
        if (!hierarchyDisplay) {
            return;
        }
        const { engine } = utils_2.MDUtilsV4.getEngineFromProc(proc);
        const note = common_all_1.NoteUtils.getNoteOrThrow({
            fname: fname,
            notes: engine.notes,
            vault: vault,
            wsRoot: engine.wsRoot,
        });
        // don't include if collection present
        if (note.children.length <= 0 || ((_a = note.custom) === null || _a === void 0 ? void 0 : _a.has_collection)) {
            return;
        }
        if (lodash_1.default.isBoolean((_b = note.custom) === null || _b === void 0 ? void 0 : _b.hierarchyDisplay) &&
            !note.custom.hierarchyDisplay) {
            return;
        }
        const children = utils_1.HierarchyUtils.getChildren({
            skipLevels: ((_c = note.custom) === null || _c === void 0 ? void 0 : _c.skipLevels) || 0,
            note,
            notes: engine.notes,
        })
            .filter((note) => site_1.SiteUtils.canPublish({ note, engine, config }))
            .filter((note) => { var _a, _b; return lodash_1.default.isUndefined((_a = note.custom) === null || _a === void 0 ? void 0 : _a.nav_exclude) || !((_b = note.custom) === null || _b === void 0 ? void 0 : _b.nav_exclude); });
        if (!lodash_1.default.isEmpty(children)) {
            root.children.push({
                type: "thematicBreak",
            });
            root.children.push(unist_builder_1.default(types_1.DendronASTTypes.HEADING, { depth: 2 }, [
                unist_builder_1.default("text", hierarchyDisplayTitle),
            ]));
            root.children.push(mdast_builder_1.list("ordered", lodash_1.default.sortBy(children, ["custom.nav_order", "title"]).map((note) => {
                return mdast_builder_1.listItem(mdast_builder_1.paragraph({
                    type: types_1.DendronASTTypes.WIKI_LINK,
                    value: note.fname,
                    data: {
                        alias: note.title,
                        vaultName: common_all_1.VaultUtils.getName(note.vault),
                    },
                    children: [],
                }));
            })));
        }
        // end transformer
    }
    return transformer;
};
exports.hierarchies = plugin;
//# sourceMappingURL=hierarchies.js.map