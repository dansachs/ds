import { DendronConfig, DEngineClient, DVault } from "@dendronhq/common-all";
import remark from "remark";
import { Processor } from "unified";
import { DendronASTDest } from "./types";
/**
 * What mode a processor should run in
 */
export declare enum ProcMode {
    /**
     * Expect no properties from {@link ProcDataFullV5} when running the processor
     */
    NO_DATA = "NO_DATA",
    /**
     * Expect all properties from {@link ProcDataFullV5} when running the processor
     */
    FULL = "all data"
}
/**
 * Options for how processor should function
 */
export declare type ProcOptsV5 = {
    mode: ProcMode;
    /**
     * Don't attach compiler
     */
    parseOnly?: boolean;
};
/**
 * Data to pass in to a processor
 */
export declare type ProcDataFullV5 = {
    engine: DEngineClient;
    vault: DVault;
    fname: string;
    config: DendronConfig;
    dest: DendronASTDest;
};
export declare type ProcDataFullOptsV5 = {
    engine: DEngineClient;
    vault: DVault;
    fname: string;
    dest: DendronASTDest;
} & {
    config?: DendronConfig;
};
export declare class MDUtilsV5 {
    static getProcOpts(proc: Processor): ProcOptsV5;
    static setProcOpts(proc: Processor, opts: ProcOptsV5): Processor<import("unified").Settings>;
    static getProcData(proc: Processor): ProcDataFullV5;
    static setProcData(proc: Processor, opts: ProcDataFullV5): Processor<import("unified").Settings>;
    static isV5Active(proc: Processor): boolean;
    /**
     * Used for processing a Dendron markdown note
     */
    static _procRemark(opts: ProcOptsV5, data?: Partial<ProcDataFullOptsV5>): Processor<remark.PartialRemarkOptions>;
    static procRemarkFull(data: ProcDataFullOptsV5): Processor<remark.PartialRemarkOptions>;
    /**
     * Parse Dendron Markdown Note. No compiler is attached.
     * @param opts
     * @param data
     * @returns
     */
    static procRemarkParse(opts: ProcOptsV5, data?: Partial<ProcDataFullOptsV5>): Processor<remark.PartialRemarkOptions>;
}
