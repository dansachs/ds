"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ALL_MIGRATIONS = void 0;
const common_server_1 = require("@dendronhq/common-server");
const lodash_1 = __importDefault(require("lodash"));
const config_1 = require("../config");
const utils_1 = require("../utils");
exports.ALL_MIGRATIONS = [
    {
        version: "0.46.1",
        changes: [
            {
                name: "migrate journal config",
                func: async ({ dendronConfig, wsConfig }) => {
                    dendronConfig.journal = config_1.DConfig.genDefaultConfig().journal;
                    if (lodash_1.default.get(wsConfig.settings, "dendron.dailyJournalDomain")) {
                        dendronConfig.journal.dailyDomain = lodash_1.default.get(wsConfig.settings, "dendron.dailyJournalDomain");
                    }
                    if (lodash_1.default.get(wsConfig.settings, "dendron.defaultJournalName")) {
                        dendronConfig.journal.name = lodash_1.default.get(wsConfig.settings, "dendron.defaultJournalName");
                    }
                    if (lodash_1.default.get(wsConfig.settings, "dendron.defaultJournalDateFormat")) {
                        dendronConfig.journal.dateFormat = lodash_1.default.get(wsConfig.settings, "dendron.defaultJournalDateFormat");
                    }
                    if (lodash_1.default.get(wsConfig.settings, "dendron.defaultJournalAddBehavior")) {
                        dendronConfig.journal.addBehavior = lodash_1.default.get(wsConfig.settings, "dendron.defaultJournalAddBehavior");
                    }
                    return { data: { dendronConfig, wsConfig } };
                },
            },
        ],
    },
    {
        version: "0.46.0",
        changes: [
            {
                name: "update cache",
                func: async ({ dendronConfig, wsConfig, wsService }) => {
                    const { wsRoot, config } = wsService;
                    await Promise.all(wsService.config.vaults.map((vault) => {
                        return utils_1.removeCache(common_server_1.vault2Path({ wsRoot, vault }));
                    }));
                    const segStatus = common_server_1.SegmentClient.getStatus();
                    // use has not disabled telemetry prior to upgrade
                    if (segStatus !== common_server_1.TelemetryStatus.DISABLED_BY_COMMAND &&
                        !config.noTelemetry) {
                        common_server_1.SegmentClient.enable(common_server_1.TelemetryStatus.ENABLED_BY_MIGRATION);
                    }
                    return { data: { dendronConfig, wsConfig } };
                },
            },
        ],
    },
];
//# sourceMappingURL=migrations.js.map