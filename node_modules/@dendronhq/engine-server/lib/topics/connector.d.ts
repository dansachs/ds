/// <reference types="node" />
import { DendronConfig, DEngineClient, DVault } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
import { FSWatcher } from "fs-extra";
import { DendronEngineClient } from "../engineClient";
export declare type EngineConnectorInitOpts = {
    onReady?: ({}: {
        ws: EngineConnector;
    }) => Promise<void>;
    numRetries?: number;
    portOverride?: number;
};
export declare class EngineConnector {
    /**
     * Conencts to the {@link DendronEngine}
     *
     * @remarks
     * Before initiating a connection, {@link EngineConnector.init} needs to be called
     */
    wsRoot: string;
    _engine: DEngineClient | undefined;
    port: number | undefined;
    onReady?: ({ ws }: {
        ws: EngineConnector;
    }) => Promise<void>;
    serverPortWatcher?: FSWatcher;
    initialized: boolean;
    config: DendronConfig;
    logger: DLogger;
    static _ENGINE_CONNECTOR: EngineConnector | undefined;
    static instance(): EngineConnector;
    static getOrCreate({ wsRoot, logger, force, }: {
        wsRoot: string;
        logger?: DLogger;
        force?: boolean;
    }): EngineConnector;
    constructor({ wsRoot, logger }: {
        wsRoot: string;
        logger?: DLogger;
    });
    get vaults(): DVault[];
    init(opts?: EngineConnectorInitOpts): Promise<void>;
    initEngine(opts: {
        engine: DendronEngineClient;
        port: number;
    }): Promise<DendronEngineClient>;
    tryToConnect({ port }: {
        port: number;
    }): Promise<false | DendronEngineClient>;
    get engine(): DEngineClient;
    _connect(opts: {
        wsRoot: string;
    }): Promise<false | {
        engine: DendronEngineClient;
        port: number;
    }>;
    connectAndInit(opts: {
        wsRoot: string;
    }): Promise<unknown>;
    createServerWatcher(opts?: {
        numRetries?: number;
    }): Promise<void>;
    onChangePort({ port }: {
        port: number;
    }): Promise<void>;
}
