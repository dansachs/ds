import { DendronConfig, DendronSiteConfig, DuplicateNoteBehavior, DVault, HierarchyConfig, NotePropsDict, NoteProps } from "@dendronhq/common-all";
import { DEngineClient } from "../types";
export declare class SiteUtils {
    static canPublish(opts: {
        note: NoteProps;
        config: DendronConfig;
        engine: DEngineClient;
    }): boolean;
    static isPublished(opts: {
        note: NoteProps;
        config: DendronConfig;
        engine: DEngineClient;
    }): boolean;
    static copyAssets(opts: {
        wsRoot: string;
        vault: DVault;
        siteAssetsDir: string;
        /**
         * Delete existing siteAssets
         */
        deleteSiteAssetsDir?: boolean;
    }): Promise<void>;
    static addSiteOnlyNotes(opts: {
        engine: DEngineClient;
    }): NoteProps[];
    static filterByConfig(opts: {
        engine: DEngineClient;
        config: DendronConfig;
    }): Promise<{
        notes: NotePropsDict;
        domains: NoteProps[];
    }>;
    /**
     * Filter notes to be published using hiearchy
     */
    static filterByHiearchy(opts: {
        domain: string;
        config: DendronConfig;
        engine: DEngineClient;
        navOrder: number;
    }): Promise<{
        notes: NotePropsDict;
        domain: NoteProps;
    } | undefined>;
    static filterByNote(opts: {
        note: NoteProps;
        hConfig: HierarchyConfig;
    }): NoteProps | undefined;
    static getConfigForHierarchy(opts: {
        config: DendronSiteConfig;
        noteOrName: NoteProps | string;
    }): HierarchyConfig;
    static getDomains(opts: {
        notes: NotePropsDict;
        config: DendronSiteConfig;
    }): NoteProps[];
    static getSiteOutputPath(opts: {
        config: DendronConfig;
        wsRoot: string;
        stage: "dev" | "prod";
    }): string;
    static handleDup(opts: {
        dupBehavior?: DuplicateNoteBehavior;
        allowStubs?: boolean;
        engine: DEngineClient;
        fname: string;
        config: DendronConfig;
        noteCandidates: NoteProps[];
        noteDict: NotePropsDict;
    }): NoteProps | undefined;
}
