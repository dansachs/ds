"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.genUUIDInsecure = exports.genUUIDasync = exports.genUUID = void 0;
const nanoid_1 = require("nanoid");
const async_1 = require("nanoid/async");
const non_secure_1 = require("nanoid/non-secure");
/** Generates a random identifier.
 *
 * @param size If provided, the output will be this many characters. Mind that collisions are more likely with shorter sizes.
 * @returns A url-safe, random identifier.
 */
function genUUID(size) {
    return nanoid_1.nanoid(size);
}
exports.genUUID = genUUID;
/** Generates a random identifier asynchronously.
 *
 * The entropy collection is performed asynchronously, allowing other code to run in the meantime.
 *
 * @param size If provided, the output will be this many characters. Mind that collisions are more likely with shorter sizes.
 * @returns A url-safe, random identifier.
 */
function genUUIDasync(size) {
    return async_1.nanoid(size);
}
exports.genUUIDasync = genUUIDasync;
/** Generates a random identifier, faster but with potential cryptographic risks.
 *
 * Uses an insecure random generator for faster generation.
 * This increases the risk of collision attacks.
 * Only use this if performance is critical and collisions are relatively unimportant.
 *
 * @param size If provided, the output will be this many characters. Mind that collisions are more likely with shorter sizes.
 * @returns A url-safe, random identifier.
 */
function genUUIDInsecure(size) {
    return non_secure_1.nanoid(size);
}
exports.genUUIDInsecure = genUUIDInsecure;
//# sourceMappingURL=uuid.js.map