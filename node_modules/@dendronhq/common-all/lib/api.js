"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DendronApiV2 = exports.DendronAPI = exports.createNoOpLogger = void 0;
const axios_1 = __importDefault(require("axios"));
const lodash_1 = __importDefault(require("lodash"));
const querystring = __importStar(require("qs"));
function createNoOpLogger() {
    const logMethod = (_msg) => { };
    return {
        level: "",
        debug: logMethod,
        info: logMethod,
        error: logMethod,
    };
}
exports.createNoOpLogger = createNoOpLogger;
// === Base
class API {
    constructor(opts) {
        opts = lodash_1.default.defaults(opts, {
            logger: createNoOpLogger(),
            statusHandlers: {},
            onAuth: async ({ headers }) => headers,
            onBuildHeaders: ({ headers }) => headers,
            onError: (_args) => {
                // console.log(args);
            },
        });
        if (!opts._request) {
            opts._request = axios_1.default.create({});
        }
        this.opts = opts;
    }
    _log(msg, lvl = "info") {
        this.opts.logger[lvl](msg);
    }
    _createPayload(data) {
        return {
            error: null,
            data,
        };
    }
    async _doRequest({ auth = false, qs = {}, path, body = {}, method = "get", json = true, }) {
        let headers = {};
        const { _request, onAuth, onBuildHeaders, endpoint, apiPath } = this.opts;
        if (auth) {
            headers = await onAuth({ headers });
        }
        headers = await onBuildHeaders({ headers });
        const requestParams = {
            url: [endpoint, apiPath, path].join("/"),
            qs,
            body,
            json,
            ...headers,
        };
        this._log({ ctx: "pre-request", requestParams }, "debug");
        const str = querystring.stringify(requestParams.qs);
        if (method === "get") {
            return _request.get(requestParams.url + `?${str}`, {
                headers,
            });
        }
        else {
            return _request.post(requestParams.url + `?${str}`, body, {
                headers,
            });
        }
    }
    async _makeRequest(args, paylaodData) {
        var _a, _b;
        let payload = this._createPayload(paylaodData);
        try {
            const resp = await this._doRequest(args);
            payload.data = resp.data.data;
            payload.error = resp.data.error;
        }
        catch (err) {
            this._log(payload.error, "error");
            payload.error = (_b = (_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.error;
        }
        if (payload.error) {
            this._log(payload.error, "error");
        }
        return payload;
    }
}
// === DendronAPI
class DendronAPI extends API {
    async configGet(req) {
        const resp = await this._makeRequest({
            path: "config/get",
            method: "get",
            qs: req,
        });
        return resp;
    }
    async configWrite(req) {
        const resp = await this._makeRequest({
            path: "config/write",
            method: "post",
            body: req,
        });
        return resp;
    }
    async workspaceInit(req) {
        const resp = await this._makeRequest({
            path: "workspace/initialize",
            method: "post",
            body: {
                ...req,
            },
        });
        return resp;
    }
    async workspaceList() {
        const resp = await this._makeRequest({
            path: "workspace/all",
            method: "get",
        });
        return resp;
    }
    async workspaceSync(req) {
        const resp = await this._makeRequest({
            path: "workspace/sync",
            method: "post",
            body: req,
        });
        return resp;
    }
    async engineBulkAdd(req) {
        const resp = await this._makeRequest({
            path: "note/bulkAdd",
            method: "post",
            body: req,
        });
        return resp;
    }
    async engineDelete(req) {
        const resp = await this._makeRequest({
            path: "note/delete",
            method: "post",
            body: req,
        });
        return resp;
    }
    async engineGetNoteByPath(req) {
        const resp = await this._makeRequest({
            path: "note/getByPath",
            method: "post",
            body: req,
        });
        return resp;
    }
    async engineInfo() {
        const resp = await this._makeRequest({
            path: "note/info",
            method: "get",
        });
        return resp;
    }
    async engineRenameNote(req) {
        const resp = await this._makeRequest({
            path: "note/rename",
            method: "post",
            body: req,
        });
        return resp;
    }
    async engineUpdateNote(req) {
        const resp = await this._makeRequest({
            path: "note/update",
            method: "post",
            body: req,
        });
        return resp;
    }
    async engineWrite(req) {
        const resp = await this._makeRequest({
            path: "note/write",
            method: "post",
            body: req,
        });
        return resp;
    }
    async noteQuery(req) {
        const resp = await this._makeRequest({
            path: "note/query",
            method: "get",
            qs: req,
        });
        return resp;
    }
    async noteRender(req) {
        const resp = await this._makeRequest({
            path: "note/render",
            method: "post",
            body: req,
        });
        return resp;
    }
    async schemaDelete(req) {
        const resp = await this._makeRequest({
            path: "schema/delete",
            method: "post",
            body: req,
        });
        return resp;
    }
    async schemaRead(req) {
        const resp = await this._makeRequest({
            path: "schema/get",
            method: "get",
            qs: req,
        });
        return resp;
    }
    async schemaQuery(req) {
        const resp = await this._makeRequest({
            path: "schema/query",
            method: "post",
            body: req,
        });
        return resp;
    }
    async schemaWrite(req) {
        const resp = await this._makeRequest({
            path: "schema/write",
            method: "post",
            body: req,
        });
        return resp;
    }
    async schemaUpdate(req) {
        const resp = await this._makeRequest({
            path: "schema/update",
            method: "post",
            body: req,
        });
        return resp;
    }
}
exports.DendronAPI = DendronAPI;
exports.DendronApiV2 = DendronAPI;
//# sourceMappingURL=api.js.map