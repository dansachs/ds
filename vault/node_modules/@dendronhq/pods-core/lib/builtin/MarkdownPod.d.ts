import { DVault, NoteProps, PodConfig } from "@dendronhq/common-all";
import { Item } from "klaw";
import { ExportPod, ExportPodPlantOpts, ImportPod, ImportPodConfig, ImportPodPlantOpts, PublishPod, PublishPodPlantOpts } from "../basev3";
export declare type MarkdownImportPodPlantOpts = ImportPodPlantOpts;
declare type MarkdownImportPodConfig = ImportPodConfig & {
    noAddUUID?: boolean;
    indexName?: string;
};
export declare type MarkdownImportPodResp = any[];
declare type DItem = Item & {
    data?: any;
    body?: string;
    entries: DItem[];
};
declare type HierarichalDict = {
    [k: string]: NoteProps[];
};
export declare class MarkdownImportPod extends ImportPod<MarkdownImportPodConfig> {
    static id: string;
    static description: string;
    get config(): PodConfig[];
    _collectItems(root: string): Promise<DItem[]>;
    _prepareItems(items: DItem[]): Promise<{
        engineFileDict: {
            [k: string]: DItem;
        };
        assetFileDict: {
            [k: string]: DItem;
        };
    }>;
    _files2HierarichalDict(opts: {
        files: DItem[];
        src: string;
        vault: DVault;
        wsRoot: string;
        config: MarkdownImportPodConfig;
    }): HierarichalDict;
    hDict2Notes(hdict: HierarichalDict, config: MarkdownImportPodConfig): NoteProps[];
    plant(opts: MarkdownImportPodPlantOpts): Promise<MarkdownImportPodResp>;
}
export declare class MarkdownPublishPod extends PublishPod {
    static id: string;
    static description: string;
    plant(opts: PublishPodPlantOpts): Promise<string>;
}
/**
 *
 */
export declare class MarkdownExportPod extends ExportPod {
    static id: string;
    static description: string;
    plant(opts: ExportPodPlantOpts): Promise<{
        notes: NoteProps[];
    }>;
}
export {};
