"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphvizExportPod = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const common_all_1 = require("@dendronhq/common-all");
const path_1 = __importDefault(require("path"));
const basev3_1 = require("../basev3");
const ID = "dendron.graphviz";
class GraphvizExportPod extends basev3_1.ExportPod {
    constructor() {
        super(...arguments);
        // Dashes are not allowed, so they are removed.
        // Initial numbers mess with rendering, so each entry is prefixed with "note"
        this.parseText = (s) => (s ? `note_${s.split("-").join("")}` : "");
    }
    get config() {
        return super.config.concat([
            {
                key: "showGraphByHierarchy",
                description: "Include hierarchical note connections (e.g. parent -> child connections)",
                default: true,
                type: "boolean",
            },
            {
                key: "showGraphByEdges",
                description: "Include linked note relationships, e.g. note with [[link]] -> another note",
                default: false,
                type: "boolean",
            },
        ]);
    }
    processNote(opts) {
        const { note, notes, connections, parentDictionary, wsRoot, showGraphByHierarchy, showGraphByEdges, } = opts;
        if (!note)
            return [connections, parentDictionary];
        const localConnections = [
            // Initial node with label
            `${this.parseText(note.id)} [label="${note.title}"]`,
        ];
        // Parent -> Child connection
        if (showGraphByHierarchy) {
            const parentID = parentDictionary[note.id];
            if (parentID) {
                localConnections.push(`${this.parseText(parentID)} -- ${this.parseText(note.id)}`);
            }
        }
        // Prepare Parent -> Child connection for this note's children
        note.children.forEach((child) => (parentDictionary[child] = note.id));
        // Note -> Linked Notes connections
        if (showGraphByEdges) {
            note.links.forEach((link) => {
                if (link.to) {
                    const destinationNote = common_all_1.NoteUtils.getNoteByFnameV5({
                        fname: link.to.fname,
                        vault: note.vault,
                        notes: notes,
                        wsRoot,
                    });
                    if (!lodash_1.default.isUndefined(destinationNote)) {
                        if ((showGraphByEdges && !showGraphByHierarchy) ||
                            !note.children.includes(destinationNote.id)) {
                            localConnections.push(`${this.parseText(note.id)} -- ${this.parseText(destinationNote.id)} [style=dotted]`);
                        }
                    }
                }
            });
        }
        return [[...connections, ...localConnections], parentDictionary];
    }
    async plant(opts) {
        const { dest, notes, wsRoot, config } = opts;
        const { showGraphByHierarchy = true, showGraphByEdges = false } = config;
        // verify dest exist
        const podDstPath = dest.fsPath;
        fs_extra_1.default.ensureDirSync(path_1.default.dirname(podDstPath));
        const [connections] = notes.reduce(([connections, dictionary], note) => {
            return this.processNote({
                note,
                notes,
                connections,
                parentDictionary: dictionary,
                wsRoot,
                showGraphByHierarchy,
                showGraphByEdges,
            });
        }, [[], {}]);
        // Create file output
        const graphvizOutput = `graph {
    ${connections.join(";\n\t")};
}`;
        // Write file
        const filePath = path_1.default.join(podDstPath, "graphviz.dot");
        fs_extra_1.default.writeFileSync(filePath, graphvizOutput);
        return { notes };
    }
}
exports.GraphvizExportPod = GraphvizExportPod;
GraphvizExportPod.id = ID;
GraphvizExportPod.description = "export notes in Graphviz DOT format";
//# sourceMappingURL=GraphvizPod.js.map