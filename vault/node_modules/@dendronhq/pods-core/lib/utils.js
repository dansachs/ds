"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PodUtils = exports.podClassEntryToPodItemV4 = void 0;
const common_server_1 = require("@dendronhq/common-server");
const fs_extra_1 = __importStar(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
__exportStar(require("./builtin"), exports);
__exportStar(require("./types"), exports);
__exportStar(require("./utils"), exports);
const podClassEntryToPodItemV4 = (p) => {
    return {
        id: p.id,
        description: p.description,
        podClass: p,
    };
};
exports.podClassEntryToPodItemV4 = podClassEntryToPodItemV4;
class PodUtils {
    static getConfig({ podsDir, podClass, }) {
        const podConfigPath = PodUtils.getConfigPath({ podsDir, podClass });
        if (!fs_extra_1.default.existsSync(podConfigPath)) {
            return false;
        }
        else {
            return common_server_1.readYAML(podConfigPath);
        }
    }
    static getConfigPath({ podsDir, podClass, }) {
        return path_1.default.join(podsDir, podClass.id, `config.${podClass.kind}.yml`);
    }
    static getPath({ podsDir, podClass, }) {
        return path_1.default.join(podsDir, podClass.id);
    }
    static getPodDir(opts) {
        const podsPath = path_1.default.join(opts.wsRoot, "pods");
        return podsPath;
    }
    /**
     * Create config file if it doesn't exist
     */
    static genConfigFile({ podsDir, podClass, force, }) {
        const podConfigPath = PodUtils.getConfigPath({ podsDir, podClass });
        fs_extra_1.ensureDirSync(path_1.default.dirname(podConfigPath));
        const pod = new podClass();
        const config = pod.config
            .map((ent) => {
            ent = lodash_1.default.defaults(ent, { default: "TODO" });
            const args = [
                `# description: ${ent.description}`,
                `# type: ${ent.type}`,
            ];
            let configPrefix = "# ";
            if (ent.required) {
                args.push(`# required: true`);
                configPrefix = "";
            }
            args.push(`${configPrefix}${ent.key}: ${ent.default}`);
            return args.join("\n");
        })
            .join("\n\n");
        if (!fs_extra_1.default.existsSync(podConfigPath) || force) {
            fs_extra_1.writeFileSync(podConfigPath, config);
        }
        return podConfigPath;
    }
    static hasRequiredOpts(_pClassEntry) {
        // TODO:
        return false;
    }
}
exports.PodUtils = PodUtils;
//# sourceMappingURL=utils.js.map