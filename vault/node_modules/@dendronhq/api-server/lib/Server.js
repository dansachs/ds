"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.appModule = void 0;
const common_server_1 = require("@dendronhq/common-server");
const cors_1 = __importDefault(require("cors"));
const express_1 = __importDefault(require("express"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const http_status_codes_1 = require("http-status-codes");
const morgan_1 = __importDefault(require("morgan"));
const path_1 = __importDefault(require("path"));
const querystring_1 = __importDefault(require("querystring"));
const constants_1 = require("./constants");
const routes_1 = require("./routes");
function appModule({ logPath, nextServerUrl, nextStaticRoot, }) {
    const ctx = "appModule:start";
    const logger = common_server_1.createLogger(constants_1.LOGGER_NAME);
    const app = express_1.default();
    app.use(cors_1.default());
    app.use(express_1.default.json({ limit: "500mb" }));
    app.use(express_1.default.urlencoded({ extended: true }));
    if (logPath !== "stdout") {
        const accessLogStream = fs_extra_1.default.createWriteStream(logPath, { flags: "a" });
        app.use(morgan_1.default(":method :url :status :response-time ms - :res[content-length] - :req[content-length]", {
            stream: accessLogStream,
        }));
    }
    logger.info({ ctx, dirPath: __dirname });
    const staticDir = path_1.default.join(__dirname, "static");
    app.use(express_1.default.static(staticDir));
    if (nextStaticRoot) {
        logger.info({ ctx, msg: "nextStaticRoot:add", nextStaticRoot });
        app.use(express_1.default.static(nextStaticRoot));
    }
    if (nextServerUrl) {
        logger.info({ ctx, msg: "adding nextServerUrl", nextServerUrl });
        app.use("/vscode", (req, res) => {
            const redirectUrl = nextServerUrl +
                "/vscode" +
                req.path.replace(/.html/, "") +
                "?" +
                querystring_1.default.stringify(req.query);
            logger.info({ ctx, msg: "redirecting", redirectUrl });
            return res.redirect(redirectUrl);
        });
    }
    app.get("/health", async (_req, res) => {
        return res.json({ ok: 1 });
    });
    app.get("/version", async (_req, res) => {
        const pkg = common_server_1.findInParent(__dirname, "package.json");
        if (!pkg) {
            throw Error("no pkg found");
        }
        const version = fs_extra_1.default.readJSONSync(path_1.default.join(pkg, "package.json")).version;
        return res.json({ version });
    });
    app.use("/api", routes_1.baseRouter);
    app.use((err, _req, res, _next) => {
        console.error(err.message, err);
        return res.status(http_status_codes_1.BAD_REQUEST).json({
            error: err.message,
        });
    });
    return app;
}
exports.appModule = appModule;
//# sourceMappingURL=Server.js.map