import { DendronEngineClient } from "@dendronhq/engine-server";
import yargs from "yargs";
import { CLICommand } from "./base";
declare type CommandOutput = {
    port: number;
    server: any;
};
declare type CommandOpts = Required<Omit<CommandCLIOpts, keyof CommandCLIOnlyOpts>> & {
    server: any;
};
declare type CommandCLIOnlyOpts = {
    /**
     *
     * Whether Dendron should write the port to the * {@link file | https://wiki.dendron.so/notes/446723ba-c310-4302-a651-df14ce6e002b.html#dendron-port-file }
     */
    noWritePort?: boolean;
};
declare type CommandCLIOpts = {
    port?: number;
    init?: boolean;
    wsRoot: string;
} & CommandCLIOnlyOpts;
export { CommandCLIOpts as LaunchEngineServerCLIOpts };
export declare class LaunchEngineServerCommand extends CLICommand<CommandOpts, CommandOutput> {
    constructor();
    buildArgs(args: yargs.Argv<CommandCLIOpts>): void;
    enrichArgs(args: CommandCLIOpts): Promise<{
        engine: DendronEngineClient;
        wsRoot: string;
        init: boolean;
        vaults: string[];
        port: number;
        server: any;
        /**
         *
         * Whether Dendron should write the port to the * {@link file | https://wiki.dendron.so/notes/446723ba-c310-4302-a651-df14ce6e002b.html#dendron-port-file }
         */
        noWritePort?: boolean | undefined;
    }>;
    execute(opts: CommandOpts): Promise<{
        port: number;
        server: any;
    }>;
}
