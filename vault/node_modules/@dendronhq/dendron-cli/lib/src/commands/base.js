"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CLICommand = exports.BaseCommand = void 0;
const common_server_1 = require("@dendronhq/common-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
class BaseCommand {
    constructor(name, opts) {
        this.opts = opts || {};
        this.L = common_server_1.createLogger(name || "Command");
    }
}
exports.BaseCommand = BaseCommand;
class CLICommand extends BaseCommand {
    constructor(opts) {
        super(opts.name, opts);
        this.eval = async (args) => {
            this.L.info({ args });
            if (!args.wsRoot) {
                const cwd = process.cwd();
                if (!fs_extra_1.default.existsSync(path_1.default.join(cwd, "dendron.yml")) &&
                    !this.wsRootOptional) {
                    console.log("no workspace detecd. --wsRoot must be set");
                    process.exit(1);
                }
                else {
                    args.wsRoot = cwd;
                }
            }
            if (args.quiet) {
                this.opts.quiet = true;
            }
            const opts = await this.enrichArgs(args);
            return this.execute(opts);
        };
        this.name = opts.name;
        this.desc = opts.desc;
    }
    buildArgs(args) {
        args.option("wsRoot", {
            describe: "location of workspace",
        });
        args.option("vault", {
            describe: "name of vault",
        });
        args.option("quiet", {
            describe: "don't print output to stdout",
        });
    }
    buildCmd(yargs) {
        return yargs.command(this.name, this.desc, this.buildArgs, this.eval);
    }
    print(obj) {
        if (!this.opts.quiet) {
            console.log(obj);
        }
    }
}
exports.CLICommand = CLICommand;
//# sourceMappingURL=base.js.map