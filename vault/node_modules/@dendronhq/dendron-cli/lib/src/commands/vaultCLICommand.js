"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VaultCLICommand = exports.VaultCommands = void 0;
const engine_server_1 = require("@dendronhq/engine-server");
const base_1 = require("./base");
const utils_1 = require("./utils");
var VaultCommands;
(function (VaultCommands) {
    VaultCommands["CREATE"] = "create";
})(VaultCommands = exports.VaultCommands || (exports.VaultCommands = {}));
class VaultCLICommand extends base_1.CLICommand {
    constructor() {
        super({ name: "vault <cmd>", desc: "vault related commands" });
    }
    buildArgs(args) {
        super.buildArgs(args);
        utils_1.setupEngineArgs(args);
        args.positional("cmd", {
            describe: "a command to run",
            choices: Object.values(VaultCommands),
            type: "string",
        });
        args.option("vaultPath", {
            describe: "path to vault",
            type: "string",
            required: true,
        });
        args.option("noAddToConfig", {
            describe: "if set, don't add vault to dendron.yml",
            type: "boolean",
        });
    }
    async enrichArgs(args) {
        const engineArgs = await utils_1.setupEngine(args);
        return { ...args, ...engineArgs };
    }
    async execute(opts) {
        const { cmd, wsRoot, vaultPath, noAddToConfig } = opts;
        try {
            switch (cmd) {
                case VaultCommands.CREATE: {
                    //const vault = checkAndCleanVault({ vaultName: opts.vault, engine });
                    const vault = {
                        fsPath: vaultPath,
                    };
                    const wsService = new engine_server_1.WorkspaceService({ wsRoot });
                    const resp = await wsService.createVault({ vault, noAddToConfig });
                    this.print(`${vaultPath} crated`);
                    return resp;
                }
                default: {
                    throw Error("bad option");
                }
            }
        }
        finally {
            if (opts.server.close) {
                opts.server.close();
            }
        }
    }
}
exports.VaultCLICommand = VaultCLICommand;
//# sourceMappingURL=vaultCLICommand.js.map