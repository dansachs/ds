import { NoteProps, DEngineClient } from "@dendronhq/common-all";
import yargs from "yargs";
import { CLICommand } from "./base";
import { SetupEngineCLIOpts, SetupEngineOpts } from "./utils";
declare type CommandCLIOpts = {
    action: DoctorActions;
    query?: string;
    /**
     * pass in note candidates directly to
     * limit what notes should be used in the command.
     */
    candidates?: NoteProps[];
    limit?: number;
    dryRun?: boolean;
    /**
     * When set to true, calls process.exit when command is done.
     *
     * This is done for CLI commands to keep the server from running
     * forever. when run from the plugin, we re-use the existing server
     * so we don't want it to exit.
     */
    exit?: boolean;
} & SetupEngineCLIOpts;
declare type CommandOpts = CommandCLIOpts & SetupEngineOpts;
declare type CommandOutput = void;
export declare enum DoctorActions {
    FIX_FRONTMATTER = "fixFrontmatter",
    H1_TO_TITLE = "h1ToTitle",
    HI_TO_H2 = "h1ToH2",
    REMOVE_STUBS = "removeStubs",
    OLD_NOTE_REF_TO_NEW = "oldNoteRefToNew",
    CREATE_MISSING_LINKED_NOTES = "createMissingLinkedNotes"
}
export { CommandOpts as DoctorCLICommandOpts };
export declare class DoctorCLICommand extends CLICommand<CommandOpts, CommandOutput> {
    constructor();
    buildArgs(args: yargs.Argv): void;
    getWildLinkDestinations(notes: NoteProps[], engine: DEngineClient): NoteProps[];
    enrichArgs(args: CommandCLIOpts): Promise<CommandOpts>;
    execute(opts: CommandOpts): Promise<void>;
}
