"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setupEngineArgs = exports.setupEngine = void 0;
const common_server_1 = require("@dendronhq/common-server");
const engine_server_1 = require("@dendronhq/engine-server");
const lodash_1 = __importDefault(require("lodash"));
const launchEngineServer_1 = require("./launchEngineServer");
const createDummyServer = () => ({
    close: () => { },
});
/**
 * Setup an engine based on CLI args
 */
async function setupEngine(opts) {
    const logger = common_server_1.createLogger();
    let { wsRoot, enginePort, init, useLocalEngine } = lodash_1.default.defaults(opts, {
        init: true,
        useLocalEngine: false,
    });
    let engine;
    let port;
    let server;
    wsRoot = common_server_1.resolvePath(wsRoot, process.cwd());
    if (useLocalEngine) {
        const engine = engine_server_1.DendronEngineV2.create({ wsRoot, logger });
        await engine.init();
        return { wsRoot, engine, port: -1, server: createDummyServer() };
    }
    if (enginePort) {
        logger.info({
            ctx: "setupEngine",
            msg: "connecting to engine",
            enginePort,
        });
        const engineConnector = engine_server_1.EngineConnector.getOrCreate({
            wsRoot,
        });
        await engineConnector.init({ portOverride: enginePort });
        engine = engineConnector.engine;
        port = enginePort;
        server = createDummyServer();
    }
    else {
        logger.info({ ctx: "setupEngine", msg: "initialize new engine" });
        ({ engine, port, server } =
            await new launchEngineServer_1.LaunchEngineServerCommand().enrichArgs(opts));
        if (init) {
            await engine.init();
        }
    }
    return { wsRoot, engine, port, server };
}
exports.setupEngine = setupEngine;
/**
 * Add yargs based options to setup engine
 */
function setupEngineArgs(args) {
    args.option("enginePort", {
        describe: "If set, connect to to running engine. If not set, create new instance of Dendron Engine",
    });
    args.option("useLocalEngine", {
        type: "boolean",
        describe: "If set, use in memory engine instead of connecting to a server",
    });
}
exports.setupEngineArgs = setupEngineArgs;
//# sourceMappingURL=utils.js.map