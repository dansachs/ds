import { createLogger } from "@dendronhq/common-server";
import yargs from "yargs";
declare type BaseCommandOpts = {
    quiet?: boolean;
};
export declare abstract class BaseCommand<TOpts, TOut = any> {
    L: ReturnType<typeof createLogger>;
    opts: BaseCommandOpts;
    constructor(name?: string, opts?: BaseCommandOpts);
    abstract execute(opts?: TOpts): Promise<TOut>;
}
export declare abstract class CLICommand<TOpts, TOut> extends BaseCommand<TOpts, TOut> {
    name: string;
    desc: string;
    protected wsRootOptional?: boolean;
    constructor(opts: {
        name: string;
        desc: string;
    } & BaseCommandOpts);
    buildArgs(args: yargs.Argv): void;
    buildCmd(yargs: yargs.Argv): yargs.Argv;
    abstract enrichArgs(args: any): Promise<TOpts>;
    eval: (args: any) => Promise<TOut>;
    print(obj: any): void;
}
export {};
