import { DendronError, SeedConfig } from "@dendronhq/common-all";
import { SeedRegistry } from "./registry";
export declare enum SeedInitMode {
    CREATE_WORKSPACE = "create_workspace",
    CONVERT_WORKSPACE = "convert_workspace"
}
export declare class SeedService {
    wsRoot: string;
    registryFile?: string;
    protected registry: SeedRegistry;
    /**
     *
     * @param wsRoot - root of file
     * @param registryFile - custom yml file to look for registry
     */
    constructor({ wsRoot, registryFile, registry, }: {
        wsRoot: string;
        registryFile?: string;
        registry?: SeedRegistry;
    });
    protected getSeedOrErrorFromId(id: string): Promise<SeedConfig | DendronError>;
    addSeed({ id, metaOnly }: {
        id: string;
        metaOnly?: boolean;
    }): Promise<{
        error: DendronError;
        data?: undefined;
    } | {
        data: {
            seedPath: string | undefined;
            seed: SeedConfig;
        };
        error?: undefined;
    }>;
    /**
     * Add seed metadata.
     * @returns
     */
    addSeedMetadata({ seed, wsRoot, }: {
        seed: SeedConfig;
        wsRoot: string;
    }): Promise<{
        seed: SeedConfig;
    }>;
    /**
     *
     * @param branch - optional branch to clone from
     * @returns
     */
    cloneSeed({ seed, branch }: {
        seed: SeedConfig;
        branch?: string;
    }): Promise<string>;
    init(opts: {
        seed: SeedConfig;
        wsRoot: string;
        mode: SeedInitMode;
    }): Promise<{
        error: DendronError;
        data?: undefined;
    } | {
        data: {
            seed: SeedConfig;
        };
        error?: undefined;
    }>;
    info({ id }: {
        id: string;
    }): Promise<SeedConfig | undefined>;
    removeSeed({ id }: {
        id: string;
    }): Promise<{
        error: DendronError;
        data?: undefined;
    } | {
        data: {};
        error?: undefined;
    }>;
    removeSeedMetadata({ seed }: {
        seed: SeedConfig;
    }): Promise<void>;
}
