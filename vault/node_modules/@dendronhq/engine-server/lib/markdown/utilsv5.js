"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MDUtilsV5 = exports.ProcMode = void 0;
const common_all_1 = require("@dendronhq/common-all");
const remark_1 = __importDefault(require("remark"));
const remark_parse_1 = __importDefault(require("remark-parse"));
const remark_frontmatter_1 = __importDefault(require("remark-frontmatter"));
const remark_abbr_1 = __importDefault(require("remark-abbr"));
const wikiLinks_1 = require("./remark/wikiLinks");
const blockAnchors_1 = require("./remark/blockAnchors");
const noteRefsV2_1 = require("./remark/noteRefsV2");
const lodash_1 = __importDefault(require("lodash"));
const utils_1 = require("./utils");
/**
 * What mode a processor should run in
 */
var ProcMode;
(function (ProcMode) {
    /**
     * Expect no properties from {@link ProcDataFullV5} when running the processor
     */
    ProcMode["NO_DATA"] = "NO_DATA";
    /**
     * Expect all properties from {@link ProcDataFullV5} when running the processor
     */
    ProcMode["FULL"] = "all data";
})(ProcMode = exports.ProcMode || (exports.ProcMode = {}));
class MDUtilsV5 {
    static getProcOpts(proc) {
        const _data = proc.data("dendronProcOptsv5");
        return _data || {};
    }
    static setProcOpts(proc, opts) {
        const _data = proc.data("dendronProcOptsv5");
        return proc.data("dendronProcOptsv5", { ..._data, ...opts });
    }
    static getProcData(proc) {
        let _data = proc.data("dendronProcDatav5");
        // backwards compatibility
        _data = lodash_1.default.defaults(utils_1.MDUtilsV4.getDendronData(proc), _data);
        return _data || {};
    }
    static setProcData(proc, opts) {
        const _data = proc.data("dendronProcDatav5");
        return proc.data("dendronProcDatav5", { ..._data, ...opts });
    }
    static isV5Active(proc) {
        return !lodash_1.default.isUndefined(this.getProcOpts(proc));
    }
    /**
     * Used for processing a Dendron markdown note
     */
    static _procRemark(opts, data) {
        const errors = [];
        let proc = remark_1.default()
            .use(remark_parse_1.default, { gfm: true })
            .use(remark_frontmatter_1.default, ["yaml"])
            .use(remark_abbr_1.default)
            .use({ settings: { listItemIndent: "1", fences: true, bullet: "-" } })
            .use(noteRefsV2_1.noteRefsV2)
            .use(wikiLinks_1.wikiLinks)
            .use(blockAnchors_1.blockAnchors)
            .data("errors", errors);
        proc = this.setProcOpts(proc, opts);
        if (opts.mode === ProcMode.FULL) {
            if (lodash_1.default.isUndefined(data)) {
                throw common_all_1.DendronError.createFromStatus({
                    status: common_all_1.ERROR_STATUS.INVALID_CONFIG,
                    message: `data is required when not using raw proc`,
                });
            }
            const hasAllProps = lodash_1.default.map(["vault", "engine", "fname", "dest"], (prop) => {
                // @ts-ignore
                return !lodash_1.default.isUndefined(data[prop]);
            });
            if (!lodash_1.default.every(hasAllProps)) {
                throw common_all_1.DendronError.createFromStatus({
                    status: common_all_1.ERROR_STATUS.INVALID_CONFIG,
                    message: `missing required fields in data`,
                });
            }
            if (!data.config) {
                data.config = data.engine.config;
            }
            // backwards compatibility, default to v4 values
            data = lodash_1.default.defaults(utils_1.MDUtilsV4.getDendronData(proc), data);
            this.setProcData(proc, data);
            utils_1.MDUtilsV4.setDendronData(proc, data);
            utils_1.MDUtilsV4.setEngine(proc, data.engine);
        }
        return proc;
    }
    static procRemarkFull(data) {
        return this._procRemark({ mode: ProcMode.FULL }, data);
    }
    /**
     * Parse Dendron Markdown Note. No compiler is attached.
     * @param opts
     * @param data
     * @returns
     */
    static procRemarkParse(opts, data) {
        return this._procRemark({ ...opts, parseOnly: true }, data);
    }
}
exports.MDUtilsV5 = MDUtilsV5;
//# sourceMappingURL=utilsv5.js.map