"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MigrationServce = void 0;
const lodash_1 = __importDefault(require("lodash"));
const semver_1 = __importDefault(require("semver"));
const migrations_1 = require("./migrations");
class MigrationServce {
    static async applyMigrationRules({ currentVersion, previousVersion, migrations, wsService, ...rest }) {
        const results = [];
        // run migrations from oldest to newest
        const migrationsToRun = lodash_1.default.reverse(lodash_1.default.takeWhile(migrations || migrations_1.ALL_MIGRATIONS, (ent) => {
            const out = semver_1.default.lt(previousVersion, ent.version);
            console.log({ previousVersion, entVersion: ent.version, out });
            return out;
        }));
        await lodash_1.default.reduce(migrationsToRun, async (prev, migration) => {
            await prev;
            const out = await this.applyMigrationChanges({
                currentVersion,
                previousVersion,
                migration,
                wsService,
                ...rest,
            });
            results.push(out);
            return out;
        }, Promise.resolve({}));
        const changes = lodash_1.default.flatten(results);
        if (!lodash_1.default.isEmpty(changes)) {
            const { data } = lodash_1.default.last(changes);
            data.dendronConfig.dendronVersion = currentVersion;
            wsService.setConfig(data.dendronConfig);
            wsService.setWorkspaceConfig(data.wsConfig);
        }
        return changes;
    }
    static async applyMigrationChanges({ currentVersion, previousVersion, migration, wsService, logger, ...rest }) {
        const results = [];
        await lodash_1.default.reduce(migration.changes, async (prev, change) => {
            const { data } = await prev;
            logger.info({ ctx: "applyMigrationChange", name: change.name });
            const { dendronConfig, wsConfig } = data;
            const out = await change.func({ dendronConfig, wsConfig, wsService });
            const changeStatus = {
                data: {
                    changeName: change.name,
                    status: "ok",
                    version: migration.version,
                    ...out.data,
                },
            };
            results.push(changeStatus);
            return changeStatus;
        }, Promise.resolve({
            data: {
                changeName: "no-op",
                version: "",
                status: "ok",
                ...rest,
            },
        }));
        return results;
    }
}
exports.MigrationServce = MigrationServce;
//# sourceMappingURL=service.js.map